{"version":3,"sources":["constants/Filter.jsx","components/TodoFilter.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/TodoApp.jsx","App.js","index.js"],"names":["Filter","TodoFilter","filter","setFilter","className","href","onClick","TodoItem","todo","toggleStatus","deleteTodo","editTitle","useState","editing","setEdit","title","newTitle","setNewTitle","key","id","classNames","completed","type","checked","onChange","onDoubleClick","autoFocus","defaultValue","event","target","value","trim","onKeyDown","onBlur","TodoList","todos","setTodos","map","TodoApp","setTitle","uncompletedTodos","completedTodos","filteredTodos","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","onSubmit","preventDefault","Date","placeholder","trimLeft","every","htmlFor","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bf78f21.chunk.js","sourcesContent":["export const Filter = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Filter } from '../constants/Filter';\n\nexport const TodoFilter = ({ filter, setFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={filter === Filter.all ? 'selected' : ''}\n        onClick={() => setFilter(Filter.all)}\n      >\n        {Filter.all}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={filter === Filter.active ? 'selected' : ''}\n        onClick={() => setFilter(Filter.active)}\n      >\n        {Filter.active}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={filter === Filter.completed ? 'selected' : ''}\n        onClick={() => setFilter(Filter.completed)}\n      >\n        {Filter.completed}\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  todo,\n  toggleStatus,\n  deleteTodo,\n  editTitle,\n}) => {\n  const [editing, setEdit] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const handleChange = (event) => {\n    setNewTitle(event.target.value.trim());\n  };\n\n  const handleEdit = (event) => {\n    if (event.key === 'Enter') {\n      editTitle(todo.id, newTitle);\n\n      if (!newTitle) {\n        deleteTodo(todo.id);\n      }\n\n      setEdit(false);\n    }\n\n    if (event.key === 'Escape') {\n      setNewTitle(todo.title);\n      setEdit(false);\n    }\n  };\n\n  const handleSaveChanges = () => {\n    editTitle(todo.id, newTitle);\n\n    if (!newTitle) {\n      deleteTodo(todo.id);\n    }\n\n    setEdit(false);\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames({\n        completed: todo.completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => toggleStatus(todo.id)}\n        />\n        <label onDoubleClick={() => setEdit(true)}>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={todo.title}\n          onChange={handleChange}\n          onKeyDown={handleEdit}\n          onBlur={handleSaveChanges}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  toggleStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  editTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, setTodos }) => {\n  const toggleStatus = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const editTitle = (id, title) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          title,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          toggleStatus={toggleStatus}\n          deleteTodo={deleteTodo}\n          editTitle={editTitle}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf().isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoFilter } from './TodoFilter';\nimport { TodoList } from './TodoList';\nimport { Filter } from '../constants/Filter';\n\nexport const TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [title, setTitle] = useState('');\n  const [filter, setFilter] = useState(Filter.all);\n\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const filteredTodos = todos.filter((todo) => {\n    switch (filter) {\n      case Filter.completed:\n        return todo.completed;\n\n      case Filter.active:\n        return !todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setTodos([\n      ...todos,\n      {\n        title,\n        id: +new Date(),\n        completed: false,\n      },\n    ]);\n\n    setTitle('');\n  };\n\n  const toggleAll = (event) => {\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: event.target.checked,\n    })));\n  };\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={({ target }) => setTitle(target.value.trimLeft())}\n          />\n        </form>\n      </header>\n\n      {todos && (\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.every(todo => todo.completed)}\n            onClick={toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            todos={filteredTodos}\n            setTodos={setTodos}\n          />\n        </section>\n      )}\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${uncompletedTodos.length} item(s) left`}\n          </span>\n\n          <TodoFilter\n            filter={filter}\n            setFilter={setFilter}\n          />\n\n          {completedTodos.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => setTodos(uncompletedTodos)}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <TodoApp />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}